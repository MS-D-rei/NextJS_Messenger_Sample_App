// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  username       String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?   @map("hashed_password")
  image          String?

  // 1 : m relation
  accounts Account[]
  messages Message[]

  // m : m relation
  conversations Conversation[]

  seen_messages Message[] @relation("user_seen_messages")

  // register User model as users table at database side
  @@map("users")
}

model Account {
  id String @id @default(cuid())

  provider          String
  providerAccountId String @map("provider_account_id")

  access_token  String?
  refresh_token String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  // m : 1 relation
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  // conbination of provider and providerAccountId is unique
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now()) @map("created_at")
  lastMessageAt DateTime @default(now()) @map("last_message_at")

  name    String?
  isGroup Boolean?

  // 1 : m relation
  messages Message[]

  // m : m relation
  users User[]

  @@map("conversations")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  text  String?
  image String?

  // m : 1 relation
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String       @map("sender_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @map("conversation_id")

  // m : m relation
  seen_by User[] @relation("user_seen_messages")

  @@map("messages")
}
